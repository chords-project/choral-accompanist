// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: choreography.proto

package frontend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Choreography_BookTravel_FullMethodName = "/choreography.Choreography/BookTravel"
	Choreography_Search_FullMethodName     = "/choreography.Choreography/Search"
)

// ChoreographyClient is the client API for Choreography service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChoreographyClient interface {
	BookTravel(ctx context.Context, in *BookTravelRequest, opts ...grpc.CallOption) (*BookTravelResult, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResult, error)
}

type choreographyClient struct {
	cc grpc.ClientConnInterface
}

func NewChoreographyClient(cc grpc.ClientConnInterface) ChoreographyClient {
	return &choreographyClient{cc}
}

func (c *choreographyClient) BookTravel(ctx context.Context, in *BookTravelRequest, opts ...grpc.CallOption) (*BookTravelResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookTravelResult)
	err := c.cc.Invoke(ctx, Choreography_BookTravel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choreographyClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResult)
	err := c.cc.Invoke(ctx, Choreography_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChoreographyServer is the server API for Choreography service.
// All implementations must embed UnimplementedChoreographyServer
// for forward compatibility.
type ChoreographyServer interface {
	BookTravel(context.Context, *BookTravelRequest) (*BookTravelResult, error)
	Search(context.Context, *SearchRequest) (*SearchResult, error)
	mustEmbedUnimplementedChoreographyServer()
}

// UnimplementedChoreographyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChoreographyServer struct{}

func (UnimplementedChoreographyServer) BookTravel(context.Context, *BookTravelRequest) (*BookTravelResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookTravel not implemented")
}
func (UnimplementedChoreographyServer) Search(context.Context, *SearchRequest) (*SearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedChoreographyServer) mustEmbedUnimplementedChoreographyServer() {}
func (UnimplementedChoreographyServer) testEmbeddedByValue()                      {}

// UnsafeChoreographyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChoreographyServer will
// result in compilation errors.
type UnsafeChoreographyServer interface {
	mustEmbedUnimplementedChoreographyServer()
}

func RegisterChoreographyServer(s grpc.ServiceRegistrar, srv ChoreographyServer) {
	// If the following call pancis, it indicates UnimplementedChoreographyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Choreography_ServiceDesc, srv)
}

func _Choreography_BookTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoreographyServer).BookTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Choreography_BookTravel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoreographyServer).BookTravel(ctx, req.(*BookTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Choreography_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoreographyServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Choreography_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoreographyServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Choreography_ServiceDesc is the grpc.ServiceDesc for Choreography service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Choreography_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "choreography.Choreography",
	HandlerType: (*ChoreographyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookTravel",
			Handler:    _Choreography_BookTravel_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Choreography_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "choreography.proto",
}
