// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: flights.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Flights_NearestAirport_FullMethodName = "/flights.Flights/NearestAirport"
	Flights_GetAirport_FullMethodName     = "/flights.Flights/GetAirport"
	Flights_SearchFlights_FullMethodName  = "/flights.Flights/SearchFlights"
	Flights_BookFlight_FullMethodName     = "/flights.Flights/BookFlight"
)

// FlightsClient is the client API for Flights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightsClient interface {
	NearestAirport(ctx context.Context, in *AirportSearchRequest, opts ...grpc.CallOption) (*Airport, error)
	GetAirport(ctx context.Context, in *AirportRequest, opts ...grpc.CallOption) (*Airport, error)
	SearchFlights(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResult, error)
	BookFlight(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*Booking, error)
}

type flightsClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightsClient(cc grpc.ClientConnInterface) FlightsClient {
	return &flightsClient{cc}
}

func (c *flightsClient) NearestAirport(ctx context.Context, in *AirportSearchRequest, opts ...grpc.CallOption) (*Airport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Airport)
	err := c.cc.Invoke(ctx, Flights_NearestAirport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetAirport(ctx context.Context, in *AirportRequest, opts ...grpc.CallOption) (*Airport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Airport)
	err := c.cc.Invoke(ctx, Flights_GetAirport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) SearchFlights(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResult)
	err := c.cc.Invoke(ctx, Flights_SearchFlights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) BookFlight(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*Booking, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Booking)
	err := c.cc.Invoke(ctx, Flights_BookFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightsServer is the server API for Flights service.
// All implementations must embed UnimplementedFlightsServer
// for forward compatibility.
type FlightsServer interface {
	NearestAirport(context.Context, *AirportSearchRequest) (*Airport, error)
	GetAirport(context.Context, *AirportRequest) (*Airport, error)
	SearchFlights(context.Context, *SearchRequest) (*SearchResult, error)
	BookFlight(context.Context, *BookingRequest) (*Booking, error)
	mustEmbedUnimplementedFlightsServer()
}

// UnimplementedFlightsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlightsServer struct{}

func (UnimplementedFlightsServer) NearestAirport(context.Context, *AirportSearchRequest) (*Airport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NearestAirport not implemented")
}
func (UnimplementedFlightsServer) GetAirport(context.Context, *AirportRequest) (*Airport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirport not implemented")
}
func (UnimplementedFlightsServer) SearchFlights(context.Context, *SearchRequest) (*SearchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFlights not implemented")
}
func (UnimplementedFlightsServer) BookFlight(context.Context, *BookingRequest) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookFlight not implemented")
}
func (UnimplementedFlightsServer) mustEmbedUnimplementedFlightsServer() {}
func (UnimplementedFlightsServer) testEmbeddedByValue()                 {}

// UnsafeFlightsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightsServer will
// result in compilation errors.
type UnsafeFlightsServer interface {
	mustEmbedUnimplementedFlightsServer()
}

func RegisterFlightsServer(s grpc.ServiceRegistrar, srv FlightsServer) {
	// If the following call pancis, it indicates UnimplementedFlightsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Flights_ServiceDesc, srv)
}

func _Flights_NearestAirport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirportSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).NearestAirport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_NearestAirport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).NearestAirport(ctx, req.(*AirportSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetAirport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetAirport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_GetAirport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetAirport(ctx, req.(*AirportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_SearchFlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).SearchFlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_SearchFlights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).SearchFlights(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_BookFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).BookFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_BookFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).BookFlight(ctx, req.(*BookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Flights_ServiceDesc is the grpc.ServiceDesc for Flights service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flights_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flights.Flights",
	HandlerType: (*FlightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NearestAirport",
			Handler:    _Flights_NearestAirport_Handler,
		},
		{
			MethodName: "GetAirport",
			Handler:    _Flights_GetAirport_Handler,
		},
		{
			MethodName: "SearchFlights",
			Handler:    _Flights_SearchFlights_Handler,
		},
		{
			MethodName: "BookFlight",
			Handler:    _Flights_BookFlight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flights.proto",
}
