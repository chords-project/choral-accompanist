import java.io.BufferedReader
import java.io.InputStreamReader

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    `java-library`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    // Choral can either be installed locally...
    mavenLocal()

    // ...or from the GitHub maven package repository
    val githubUsername = project.findProperty("gpr.user") as String? ?: System.getenv("USERNAME")
    val githubToken = project.findProperty("gpr.key") as String? ?: System.getenv("TOKEN")
    if (githubUsername != null && githubToken != null) {
        maven {
            url = uri("https://maven.pkg.github.com/choral-lang/choral")
            credentials {
                username = githubUsername
                password = githubToken
            }
        }
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    implementation(project(":reactive-middleware"))
}

tasks.register("compileChoral") {
    val choreographies = listOf(
        "WarehouseOrder",
    )

    doLast {
        choreographies.forEach { name: String ->
            layout.projectDirectory.dir(".")
            val process = ProcessBuilder()
                .command(
                    listOf(
                        "choral", "epp",
                        "--sources=${layout.projectDirectory.dir("src/main/choral")}",
                        "--headers=${layout.projectDirectory.dir("src/main/choral")}:${layout.projectDirectory.dir("../../../reactive-middleware/src/main/choral")}",
                        "--target=${layout.buildDirectory.dir("generated/choral").get()}",
                        name
                    )
                )
                .redirectOutput(ProcessBuilder.Redirect.PIPE)
                .redirectError(ProcessBuilder.Redirect.PIPE)
                .directory(rootProject.projectDir)
                .start()

            process.waitFor(60, TimeUnit.SECONDS)

            if (process.exitValue() != 0) {
                val output = BufferedReader(InputStreamReader(process.inputStream)).readText()
                throw GradleException("Failed to generate choreography '$name':\n\n$output")
            }
        }
    }
}

tasks.compileJava {
    dependsOn("compileChoral")
}

sourceSets {
    main {
        java {
            srcDir(layout.buildDirectory.dir("generated/choral").get())
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
