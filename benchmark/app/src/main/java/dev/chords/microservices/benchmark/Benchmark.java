/*
 * This source file was generated by the Gradle 'init' task
 */
package dev.chords.microservices.benchmark;

import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.Callable;
import java.util.function.Function;

import accompanist.benchmark.chain.Chain;
import choral.reactive.tracing.JaegerConfiguration;
import dev.chords.microservices.benchmark.chain.ChainBenchmark;
import dev.chords.microservices.benchmark.chain.ChainChoreographyStart;
import dev.chords.microservices.benchmark.chain.ChainOrchestrator;
import dev.chords.microservices.benchmark.chain.ChainSidecar;
import io.opentelemetry.api.OpenTelemetry;
import io.opentelemetry.sdk.OpenTelemetrySdk;

public class Benchmark {

    final static String SERVICE_A = "localhost:8201";
    final static String SERVICE_B = "localhost:8202";
    final static int GRPC_PORT = 5430;

    interface TestAction<T> {
        void test(T value) throws Exception;
    }

    public static void benchmarkChoreography(TestAction<ServiceA> testAction) throws Exception {

        final String JAEGER_ENDPOINT = "http://localhost:4317";

        GrpcServer grpcServer = new GrpcServer();
        grpcServer.start(GRPC_PORT);

        ServiceA serviceA = new ServiceA(OpenTelemetrySdk.builder().build(), SERVICE_B);
        ServiceB serviceB = new ServiceB(OpenTelemetrySdk.builder().build(), SERVICE_A);

//        ServiceA serviceA = new ServiceA(JaegerConfiguration.initTelemetry(JAEGER_ENDPOINT, "ServiceA"), SERVICE_B);
//        ServiceB serviceB = new ServiceB(JaegerConfiguration.initTelemetry(JAEGER_ENDPOINT, "ServiceB"), SERVICE_A);

        serviceA.listen(SERVICE_A);
        serviceB.listen(SERVICE_B);

        testAction.test(serviceA);

        serviceA.close();
        serviceB.close();
        grpcServer.stop();
    }

    public static void benchmarkGrpc(TestAction<GrpcClient> testAction) throws Exception {
        final String JAEGER_ENDPOINT = "http://localhost:4317";

        GrpcServer server = new GrpcServer();
        GrpcClient client = new GrpcClient(GRPC_PORT, JaegerConfiguration.initTelemetry(JAEGER_ENDPOINT, "GrpcClient"));

        server.start(GRPC_PORT);

        testAction.test(client);

        client.shutdown();
        server.stop();
    }

    public static void measure(int n, Callable<Void> action) throws Exception {
        long startTime = System.nanoTime();
        action.call();
        long endTime = System.nanoTime();
        System.out.println("Warmup took " + (endTime - startTime) + " ms");

        var latencies = new ArrayList<Long>(n);

        for (int i = 0; i < n; i++) {
            startTime = System.nanoTime();
            action.call();
            endTime = System.nanoTime();

            latencies.add(endTime - startTime);
        }

        Collections.sort(latencies);

        long median = latencies.get(n / 2);
        long lowAvg = latencies.stream().limit(n / 2).reduce(0L, Long::sum) / (n / 2);

        System.out.println("Median: " + median / 1_000_000.0 + ", Low avg: " + lowAvg / 1_000_000.0);
    }

    public static void main(String[] args) throws Exception {

        OpenTelemetry telemetry = OpenTelemetry.noop();

        String benchmark = System.getenv("BENCHMARK");
        if (benchmark == null) {
            System.out.println("Usage of accompanist-benchmark:");
            System.out.println("    BENCHMARK=chain-sidecar-start, PORT=port NEXT_SIDECAR=address:port");
            System.out.println("    BENCHMARK=chain-sidecar-a, SERVICE=address:port NEXT_SIDECAR=address:port START=address:port");
            System.out.println("    BENCHMARK=chain-sidecar-b, SERVICE=address:port NEXT_SIDECAR=address:port");
            System.out.println("    BENCHMARK=chain-sidecar-c, SERVICE=address:port NEXT_SIDECAR=address:port START=address:port");
            System.out.println("    BENCHMARK=chain-sidecar-d, SERVICE=address:port NEXT_SIDECAR=address:port");
            System.out.println("    BENCHMARK=chain-sidecar-e, SERVICE=address:port NEXT_SIDECAR=address:port");
            System.out.println("    BENCHMARK=greeter PORT=port");
            System.out.println("    BENCHMARK=chain-client-choreography SERVICE=address:port");
            System.out.println("    BENCHMARK=chain-orchestrator PORT=port FIRST=address:port SECOND=address:port THIRD=address:port FOURTH=address:port FIFTH=address:port");
            System.out.println("    BENCHMARK=chain-benchmark ORCHESTRATOR=address:port CHOREOGRAPHY=address:port TOXIPROXY=address:port");
            System.exit(1);
        }

        String nextSidecar = System.getenv("NEXT_SIDECAR");
        String startAddress = System.getenv("START");
        String serviceAddress = System.getenv("SERVICE");
        String orchestratorAddress = System.getenv("ORCHESTRATOR");
        String choreographyAddress = System.getenv("CHOREOGRAPHY");
        String port = System.getenv("PORT");
        String toxiproxy = System.getenv("TOXIPROXY");

        String first = System.getenv("FIRST");
        String second = System.getenv("SECOND");
        String third = System.getenv("THIRD");
        String fourth = System.getenv("FOURTH");
        String fifth = System.getenv("FIFTH");

        switch (benchmark) {
            case "chain-sidecar-start" -> {
                var sidecar = new ChainChoreographyStart(telemetry, nextSidecar);
                sidecar.start(Integer.parseInt(port));
                sidecar.blockUntilShutdown();
            }
            case "chain-sidecar-a" -> {
                var sidecar = ChainSidecar.makeChainA(telemetry, serviceAddress, nextSidecar, startAddress);
                sidecar.listen().join();
            }
            case "chain-sidecar-b" -> {
                var sidecar = ChainSidecar.makeChainB(telemetry, serviceAddress, nextSidecar);
                sidecar.listen().join();
            }
            case "chain-sidecar-c" -> {
                var service = ChainSidecar.makeChainC(telemetry, serviceAddress, nextSidecar, startAddress);
                service.listen().join();
            }
            case "chain-sidecar-d" -> {
                var service = ChainSidecar.makeChainD(telemetry, serviceAddress, nextSidecar);
                service.listen().join();
            }
            case "chain-sidecar-e" -> {
                var service = ChainSidecar.makeChainE(telemetry, serviceAddress, nextSidecar);
                service.listen().join();
            }
            case "greeter" -> {
                GrpcServer server = new GrpcServer();
                server.start(Integer.parseInt(port));
                server.blockUntilShutdown();
            }
            case "chain-orchestrator" -> {
                ChainOrchestrator orchestrator = new ChainOrchestrator(first, second, third, fourth, fifth, telemetry);
                orchestrator.start(Integer.parseInt(port));
                orchestrator.blockUntilShutdown();
                orchestrator.close();
            }
            case "chain-benchmark" -> {
                ChainBenchmark bm = new ChainBenchmark(telemetry, orchestratorAddress, choreographyAddress, toxiproxy);
                var result = bm.runBenchmark();

                Function<Chain.ChainLength, Integer> lengthToNumber = len -> switch (len) {
                    case ONE -> 1;
                    case THREE -> 3;
                    case FIVE -> 5;
                    default -> throw new IllegalStateException("Unexpected value: " + len);
                };

                System.out.println("\nChoreography:");
                System.out.println("chain_length;sidecar;total;simulated_latency");
                for (var r : result.choreography()) {
                    Long sidecarLatency = r.sidecarLatency().stream().reduce(0L, Long::sum);
                    Integer chainLength = lengthToNumber.apply(r.chainLength());
                    System.out.println(chainLength + ";" + sidecarLatency + ";" + r.total() + ";" + r.simulatedLatency());
                }

                System.out.println("\nOrchestrator:");
                System.out.println("chain_length;end_to_end_time;orchestrator_time;simulated_latency");
                for (var r : result.orchestrator()) {
                    Integer chainLength = lengthToNumber.apply(r.chainLength());
                    System.out.println(chainLength + ";" + r.endToEndTime() + ";" + r.orchestratorTime() + ";" + r.simulatedLatency());
                }
            }
            default -> {
                System.err.println("Invalid benchmark type: " + benchmark);
                System.exit(1);
            }
        }

    }
}
