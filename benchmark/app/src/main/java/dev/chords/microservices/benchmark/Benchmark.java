/*
 * This source file was generated by the Gradle 'init' task
 */
package dev.chords.microservices.benchmark;

import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.Callable;

import choral.reactive.tracing.JaegerConfiguration;
import io.opentelemetry.api.OpenTelemetry;
import io.opentelemetry.sdk.OpenTelemetrySdk;

public class Benchmark {

    final static String SERVICE_A = "localhost:8201";
    final static String SERVICE_B = "localhost:8202";
    final static int GRPC_PORT = 5430;

    interface TestAction<T> {
        void test(T value) throws Exception;
    }

    public static void benchmarkChoreography(TestAction<ServiceA> testAction) throws Exception {

        final String JAEGER_ENDPOINT = "http://localhost:4317";

        GrpcServer grpcServer = new GrpcServer();
        grpcServer.start(GRPC_PORT);

        ServiceA serviceA = new ServiceA(OpenTelemetrySdk.builder().build(), SERVICE_B);
        ServiceB serviceB = new ServiceB(OpenTelemetrySdk.builder().build(), SERVICE_A);

//        ServiceA serviceA = new ServiceA(JaegerConfiguration.initTelemetry(JAEGER_ENDPOINT, "ServiceA"), SERVICE_B);
//        ServiceB serviceB = new ServiceB(JaegerConfiguration.initTelemetry(JAEGER_ENDPOINT, "ServiceB"), SERVICE_A);

        serviceA.listen(SERVICE_A);
        serviceB.listen(SERVICE_B);

        testAction.test(serviceA);

        serviceA.close();
        serviceB.close();
        grpcServer.stop();
    }

    public static void benchmarkGrpc(TestAction<GrpcClient> testAction) throws Exception {
        final String JAEGER_ENDPOINT = "http://localhost:4317";

        GrpcServer server = new GrpcServer();
        GrpcClient client = new GrpcClient(GRPC_PORT, JaegerConfiguration.initTelemetry(JAEGER_ENDPOINT, "GrpcClient"));

        server.start(GRPC_PORT);

        testAction.test(client);

        client.shutdown();
        server.stop();
    }

    public static void measure(int n, Callable<Void> action) throws Exception {
        long startTime = System.nanoTime();
        action.call();
        long endTime = System.nanoTime();
        System.out.println("Warmup took " + (endTime - startTime) + " ms");

        var latencies = new ArrayList<Long>(n);

        for (int i = 0; i < n; i++) {
            startTime = System.nanoTime();
            action.call();
            endTime = System.nanoTime();

            latencies.add(endTime - startTime);
        }

        Collections.sort(latencies);

        long median = latencies.get(n / 2);
        long lowAvg = latencies.stream().limit(n / 2).reduce(0L, Long::sum) / (n / 2);

        System.out.println("Median: " + median / 1_000_000.0 + ", Low avg: " + lowAvg / 1_000_000.0);
    }

    public static void main(String[] args) throws Exception {

        OpenTelemetry telemetry = OpenTelemetry.noop();

        String benchmark = System.getenv("BENCHMARK");
        if (benchmark == null) {
            System.out.println("Usage of accompanist-benchmark:");
            System.out.println("    BENCHMARK=chain-a, SERVICE=address:port NEXT_SIDECAR=address:port");
            System.out.println("    BENCHMARK=chain-b, SERVICE=address:port NEXT_SIDECAR=address:port");
            System.out.println("    BENCHMARK=chain-c, SERVICE=address:port NEXT_SIDECAR=address:port");
            System.out.println("    BENCHMARK=greeter PORT=port");
            System.out.println("    BENCHMARK=chain-client-choreography SERVICE=address:port");
            System.out.println("    BENCHMARK=chain-orchestrator PORT=port FIRST=address:port SECOND=address:port THIRD=address:port");
            System.out.println("    BENCHMARK=chain-benchmark ORCHESTRATOR=address:port FIRST=address:port NEXT_SIDECAR=address:port TOXIPROXY=address:port");
            System.exit(1);
        }

        String nextSidecar = System.getenv("NEXT_SIDECAR");
        String serviceAddress = System.getenv("SERVICE");
        String orchestratorAddress = System.getenv("ORCHESTRATOR");
        String port = System.getenv("PORT");
        String toxiproxy = System.getenv("TOXIPROXY");

        String first = System.getenv("FIRST");
        String second = System.getenv("SECOND");
        String third = System.getenv("THIRD");

        switch (benchmark) {
            case "chain-a" -> {
                var service = ChainService.makeChainA(telemetry, serviceAddress, nextSidecar);
                Thread server = service.listen();

                Thread.sleep(5000);

                service.initiateRequestChain();

                server.join();
            }
            case "chain-b" -> {
                var service = ChainService.makeChainB(telemetry, serviceAddress, nextSidecar);
                service.listen().join();
            }
            case "chain-c" -> {
                var service = ChainService.makeChainC(telemetry, serviceAddress, nextSidecar);
                service.listen().join();
            }
            case "greeter" -> {
                GrpcServer server = new GrpcServer();
                server.start(Integer.parseInt(port));
                server.blockUntilShutdown();
            }
            case "chain-orchestrator" -> {
                ChainOrchestrator orchestrator = new ChainOrchestrator(first, second, third, telemetry);
                orchestrator.start(Integer.parseInt(port));
                orchestrator.blockUntilShutdown();
                orchestrator.close();
            }
            case "chain-benchmark" -> {
                ChainBenchmark bm = new ChainBenchmark(telemetry, orchestratorAddress, first, nextSidecar, toxiproxy);
                var result = bm.runBenchmark();

                System.out.println("\nChoreography:");
                System.out.println("sidecar;total;simulated_latency");
                for (var r : result.choreography()) {
                    Long sidecarLatency = r.sidecarLatency().stream().reduce(0L, Long::sum);
                    System.out.println(sidecarLatency + ";" + r.total() + ";" + r.simulatedLatency());
                }

                System.out.println("\nOrchestrator:");
                System.out.println("total;simulated_latency");
                for (var r : result.orchestrator()) {
                    System.out.println(r.total() + ";" + r.simulatedLatency());
                }
            }
            default -> {
                System.err.println("Invalid benchmark type: " + benchmark);
                System.exit(1);
            }
        }

        /*Scanner input = new Scanner(System.in);
        System.out.print("Press Enter to perform benchmark...");
        input.nextLine();
        input.close();

        benchmarkChoreography(serviceA -> {
            measure(10_000, () -> {
                serviceA.startPingPong();
                return null;
            });

            measure(10_000, () -> {
                serviceA.startGreeting();
                return null;
            });
        });

        benchmarkGrpc(client -> {
            measure(10_000, () -> {
                client.greet("Name");
                return null;
            });
        });*/

    }
}
