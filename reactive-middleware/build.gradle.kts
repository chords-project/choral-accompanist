/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

group = "dev.chords"
version = "0.1.0"

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`

    id("com.google.protobuf") version "0.9.4"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    // Choral can either be installed locally...
    mavenLocal()

    // ...or from the GitHub maven package repository
    val githubUsername = project.findProperty("gpr.user") as String? ?: System.getenv("USERNAME")
    val githubToken = project.findProperty("gpr.key") as String? ?: System.getenv("TOKEN")
    if (githubUsername != null && githubToken != null) {
        maven {
            url = uri("https://maven.pkg.github.com/choral-lang/choral")
            credentials {
                username = githubUsername
                password = githubToken
            }
        }
    }
}

var choralVersion = "0.1.7"
var grpcVersion = "1.68.1"
var otelVersion = "1.47.0"

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // ## Choral ##
    api("org.choral-lang:choral:${choralVersion}")
    api("org.choral-lang:runtime:${choralVersion}")

    // ## OpenTelemetry SDK ##

    // using the bom ensures that all of your opentelemetry dependency versions are aligned
    api(platform("io.opentelemetry:opentelemetry-bom:${otelVersion}"))

    api("io.opentelemetry:opentelemetry-api")
    api("io.opentelemetry:opentelemetry-sdk")
    api("io.opentelemetry:opentelemetry-exporter-otlp")
    api("io.opentelemetry.instrumentation:opentelemetry-grpc-1.6:2.13.3-alpha")

    // ## gRPC ##
    runtimeOnly("io.grpc:grpc-netty-shaded:${grpcVersion}")
    implementation("io.grpc:grpc-protobuf:${grpcVersion}")
    implementation("io.grpc:grpc-stub:${grpcVersion}")
    implementation("io.grpc:grpc-opentelemetry:${grpcVersion}")
    implementation("io.grpc:grpc-services:${grpcVersion}")
    compileOnly("org.apache.tomcat:annotations-api:6.0.53")

    implementation("org.zeromq:jeromq:0.6.0")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Compile protobuf code
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.5"
    }
    plugins {
        create("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:1.68.1"
        }
    }
    generateProtoTasks {
        all().forEach { task ->
            task.plugins {
                create("grpc") {}
            }
        }
    }
}
